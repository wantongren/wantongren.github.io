---
layout: post
title: Gin框架学习笔记 
date: 2021-01-17 10:50:00 +0900
category: work2021 
---
## 框架介绍
Gin 是一个 go 写的 web 框架，具有高性能的优点。官方地址：https://github.com/gin-gonic/gin

## 框架要点
根据官方文档进行整理。
<br>
* **支持的http方法**


```go
    func main() {
	// Creates a gin router with default middleware:
	// logger and recovery (crash-free) middleware
	router := gin.Default()

	router.GET("/someGet", getting)
	router.POST("/somePost", posting)
	router.PUT("/somePut", putting)
	router.DELETE("/someDelete", deleting)
	router.PATCH("/somePatch", patching)
	router.HEAD("/someHead", head)
	router.OPTIONS("/someOptions", options)

	// By default it serves on :8080 unless a
	// PORT environment variable was defined.
	router.Run()
	// router.Run(":3000") for a hard coded port
    }
```
GET   : 从服务器端获取数据，请求body在地址栏上,用于获取资源，是幂等的，无副作用；<br>
POST  : 向服务器端提交数据，请求数据在报文body里，发送一个修改数据的请求，需求数据要从新创建，用于创建，更新，删除资源，查询资源都可以，是不幂等的；<br>
PUT   : 向服务器端提交数据，请求数据在报文body里，发送一个修改数据的请求，需求数据更新（全部更新），用于添加/更新资源；<br> 
PATCH : 向服务器端提交数据，请求数据在报文body里，发送一个修改数据的请求，需求数据更新（部分更新），用于更新资源，且是局部更新，比如：user对象，你只更改了name属性，那么他的其他属性值是不会变的，如果你用post，那么其他属性值会被设置为null（全局更新）<br> 
DELETE: 向服务器端提交数据，请求数据在报文body里，发送一个删除数据的请求，用于删除资源<br>
HEAD  : 和GET方法一致，除了服务器不能在响应里返回消息主体。<br>
OPTION: 表明请求想得到请求/响应链上关于此请求里的URI（Request-URI）指定资源的通信选项信息。<br>
<br>
* **基本用法**

```go
func main() {
	router := gin.Default()

    //用法1
	// This handler will match /user/john but will not match /user/ or /user
	router.GET("/user/:name", func(c *gin.Context) {
		name := c.Param("name")
		c.String(http.StatusOK, "Hello %s", name)
	})

	// However, this one will match /user/john/ and also /user/john/send
	// If no other routers match /user/john, it will redirect to /user/john/
	router.GET("/user/:name/*action", func(c *gin.Context) {
		name := c.Param("name")
		action := c.Param("action")
		message := name + " is " + action
		c.String(http.StatusOK, message)
	})

	// For each matched request Context will hold the route definition
	router.POST("/user/:name/*action", func(c *gin.Context) {
		c.FullPath() == "/user/:name/*action" // true
	})

    //用法2
    // Query string parameters are parsed using the existing underlying request object.
	// The request responds to a url matching:  /welcome?firstname=Jane&lastname=Doe
	router.GET("/welcome", func(c *gin.Context) {
		firstname := c.DefaultQuery("firstname", "Guest")
		lastname := c.Query("lastname") // shortcut for c.Request.URL.Query().Get("lastname")

		c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
	})

    //用法3  Multipart/Urlencoded Form
    router.POST("/form_post", func(c *gin.Context) {
    		message := c.PostForm("message")
    		nick := c.DefaultPostForm("nick", "anonymous")
    
    		c.JSON(200, gin.H{
    			"status":  "posted",
    			"message": message,
    			"nick":    nick,
    		})
    	})
   
    //用法4
    router.POST("/post", func(c *gin.Context) {
    
    		ids := c.QueryMap("ids")
    		names := c.PostFormMap("names")
    
    		fmt.Printf("ids: %v; names: %v", ids, names)
    	})

    //用法5   
    //Set a lower memory limit for multipart forms (default is 32 MiB)
	router.MaxMultipartMemory = 8 << 20  // 8 MiB
	router.POST("/upload", func(c *gin.Context) {
		// single file
		file, _ := c.FormFile("file")
		log.Println(file.Filename)

		// Upload the file to specific dst.
		c.SaveUploadedFile(file, dst)

		c.String(http.StatusOK, fmt.Sprintf("'%s' uploaded!", file.Filename))
	})
	
    //用法6
    // Set a lower memory limit for multipart forms (default is 32 MiB)
	router.MaxMultipartMemory = 8 << 20  // 8 MiB
	router.POST("/upload", func(c *gin.Context) {
		// Multipart form
		form, _ := c.MultipartForm()
		files := form.File["upload[]"]

		for _, file := range files {
			log.Println(file.Filename)

			// Upload the file to specific dst.
			c.SaveUploadedFile(file, dst)
		}
		c.String(http.StatusOK, fmt.Sprintf("%d files uploaded!", len(files)))
	})

    // 用法7
    // Simple group: v1
	v1 := router.Group("/v1")
	{
		v1.POST("/login", loginEndpoint)
		v1.POST("/submit", submitEndpoint)
		v1.POST("/read", readEndpoint)
	}
	// Simple group: v2
	v2 := router.Group("/v2")
	{
		v2.POST("/login", loginEndpoint)
		v2.POST("/submit", submitEndpoint)
		v2.POST("/read", readEndpoint)
	}




	router.Run(":8080")
}
```
1. 获取路径里的参数： c.Param(key)
2. 获取查询参数：    c.Query(key)     c.DefaultQuery(key,defaultValue)
3. 获取表单数据：    c.PostForm(key)  c.DefaultPostForm(key,defaultValue)
4. Map作为查询参数和表单参数：  c.QueryMap(key)   c.PostFormMap(key)
```
    POST /post?ids[a]=1234&ids[b]=hello HTTP/1.1
    Content-Type: application/x-www-form-urlencoded

    names[first]=thinkerou&names[second]=tianou

    //返回值
    ids: map[b:hello a:1234]; names: map[second:tianou first:thinkerou]
```
5. 上传文件
```
curl -X POST http://localhost:8080/upload \
  -F "file=@/Users/appleboy/test.zip" \
  -H "Content-Type: multipart/form-data"
```
6. 上传多个文件
```
curl -X POST http://localhost:8080/upload \
  -F "upload[]=@/Users/appleboy/test1.zip" \
  -F "upload[]=@/Users/appleboy/test2.zip" \
  -H "Content-Type: multipart/form-data"
```
7. 分组路由
8. r.gin.New()和r.gin.Default()区别：
> r := gin.New() : 没有使用任何中间件
>
> r := gin.Default(): 绑定了Logger和Recovery中间件

    ```go
    func main() {
        // Creates a router without any middleware by default
        r := gin.New()
    
        // Global middleware
        // Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.
        // By default gin.DefaultWriter = os.Stdout
        r.Use(gin.Logger())
    
        // Recovery middleware recovers from any panics and writes a 500 if there was one.
        r.Use(gin.Recovery())
    
        // Per route middleware, you can add as many as you desire.
        r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
    
        // Authorization group
        // authorized := r.Group("/", AuthRequired())
        // exactly the same as:
        authorized := r.Group("/")
        // per group middleware! in this case we use the custom created
        // AuthRequired() middleware just in the "authorized" group.
        authorized.Use(AuthRequired())
        {
            authorized.POST("/login", loginEndpoint)
            authorized.POST("/submit", submitEndpoint)
            authorized.POST("/read", readEndpoint)
    
            // nested group
            testing := authorized.Group("testing")
            testing.GET("/analytics", analyticsEndpoint)
        }
    
        // Listen and serve on 0.0.0.0:8080
        r.Run(":8080")
    }
    ```
9. 写日志文件
```go
func main() {
    // Disable Console Color, you don't need console color when writing the logs to file.
    gin.DisableConsoleColor()

    // Logging to a file.
    f, _ := os.Create("gin.log")
    gin.DefaultWriter = io.MultiWriter(f)

    // Use the following code if you need to write the logs to file and console at the same time.
    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)

    router := gin.Default()
    router.GET("/ping", func(c *gin.Context) {
        c.String(200, "pong")
    })

    router.Run(":8080")
}
```
10. 自定义日志格式
```go
func main() {
	router := gin.New()

	// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter
	// By default gin.DefaultWriter = os.Stdout
	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {

		// your custom format
		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
				param.ClientIP,
				param.TimeStamp.Format(time.RFC1123),
				param.Method,
				param.Path,
				param.Request.Proto,
				param.StatusCode,
				param.Latency,
				param.Request.UserAgent(),
				param.ErrorMessage,
		)
	}))
	router.Use(gin.Recovery())

	router.GET("/ping", func(c *gin.Context) {
		c.String(200, "pong")
	})

	router.Run(":8080")
}
```
11. 控制输出日志的颜色
默认情况下，输出的日志颜色是依赖于终端TTY的，可以通过gin.DisableConsoleColor()关闭颜色，或者通过gin.ForceConsoleColor()开启。
12. 模型绑定和验证
支持JSON,XML,YAML和标准表单格式（foo=bar&boo-baz），使用模型绑定需要在所有的域上设置标签，比如，绑定JSON格式的设置为 `json:"fieldname"`
Gin提供两类绑定方法集：<br>
**Type - Must bind**
     * **Methods** - Bind, BindJSON, BindXML, BindQuery, BindYAML, BindHeader
     * **Behavior** - These methods use MustBindWith under the hood. If there is a binding error, the request is aborted with c.AbortWithError(400, err).SetType(ErrorTypeBind). This sets the response status code to 400 and the Content-Type header is set to text/plain; charset=utf-8. Note that if you try to set the response code after this, it will result in a warning [GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422. If you wish to have greater control over the behavior, consider using the ShouldBind equivalent method.<br>
 **Type - Should bind**
     * **Methods** - ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML
     * **Behavior** - These methods use ShouldBindWith under the hood. If there is a binding error, the error is returned and it is the developer's responsibility to handle the request and error appropriately.

使用绑定方法时，Gin会尝试依据Content-Type头信息来推断绑定结构，如果你确定绑定的结构，可以使用`MustBindWith`或者`ShouldBindWith`。
Gin也支持通过设置`binding:"required"`指定域为必须，设置后，如果为空则报错。
13. 自定义验证器
    ```
    package main
    
    import (
    	"net/http"
    	"time"
    
    	"github.com/gin-gonic/gin"
    	"github.com/gin-gonic/gin/binding"
    	"github.com/go-playground/validator/v10"
    )
    
    // Booking contains binded and validated data.
    type Booking struct {
    	CheckIn  time.Time `form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`
    	CheckOut time.Time `form:"check_out" binding:"required,gtfield=CheckIn" time_format:"2006-01-02"`
    }
    
    var bookableDate validator.Func = func(fl validator.FieldLevel) bool {
    	date, ok := fl.Field().Interface().(time.Time)
    	if ok {
    		today := time.Now()
    		if today.After(date) {
    			return false
    		}
    	}
    	return true
    }
    
    func main() {
    	route := gin.Default()
    
    	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
    		v.RegisterValidation("bookabledate", bookableDate)
    	}
    
    	route.GET("/bookable", getBookable)
    	route.Run(":8085")
    }
    
    func getBookable(c *gin.Context) {
    	var b Booking
    	if err := c.ShouldBindWith(&b, binding.Query); err == nil {
    		c.JSON(http.StatusOK, gin.H{"message": "Booking dates are valid!"})
    	} else {
    		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
    	}
    }
    ```
14. 只绑定查询字符串
`ShouldBindQuery`函数只会绑定查询参数，不绑定post数据。
15. 绑定查询字符串和post数据
`ShouldBind`函数可以完成上述功能。
16. 绑定Uri
    ```go
    package main
    
    import "github.com/gin-gonic/gin"
    
    type Person struct {
    	ID string `uri:"id" binding:"required,uuid"`
    	Name string `uri:"name" binding:"required"`
    }
    
    func main() {
    	route := gin.Default()
    	route.GET("/:name/:id", func(c *gin.Context) {
    		var person Person
    		if err := c.ShouldBindUri(&person); err != nil {
    			c.JSON(400, gin.H{"msg": err})
    			return
    		}
    		c.JSON(200, gin.H{"name": person.Name, "uuid": person.ID})
    	})
    	route.Run(":8088")
    }
    ```
17. 绑定Header
    ```go
    package main
    
    import (
    	"fmt"
    	"github.com/gin-gonic/gin"
    )
    
    type testHeader struct {
    	Rate   int    `header:"Rate"`
    	Domain string `header:"Domain"`
    }
    
    func main() {
    	r := gin.Default()
    	r.GET("/", func(c *gin.Context) {
    		h := testHeader{}
    
    		if err := c.ShouldBindHeader(&h); err != nil {
    			c.JSON(200, err)
    		}
    
    		fmt.Printf("%#v\n", h)
    		c.JSON(200, gin.H{"Rate": h.Rate, "Domain": h.Domain})
    	})
    
    	r.Run()
    
    // client
    // curl -H "rate:300" -H "domain:music" 127.0.0.1:8080/
    // output
    // {"Domain":"music","Rate":300}
    }
    ```
18. 绑定HTML checkboxes
    ```go
    type myForm struct {
        Colors []string `form:"colors[]"`
    }
    
    ...
    
    func formHandler(c *gin.Context) {
        var fakeForm myForm
        c.ShouldBind(&fakeForm)
        c.JSON(200, gin.H{"color": fakeForm.Colors})
    }
    ```
    form.html
    ```html
    <form action="/" method="POST">
        <p>Check some colors</p>
        <label for="red">Red</label>
        <input type="checkbox" name="colors[]" value="red" id="red">
        <label for="green">Green</label>
        <input type="checkbox" name="colors[]" value="green" id="green">
        <label for="blue">Blue</label>
        <input type="checkbox" name="colors[]" value="blue" id="blue">
        <input type="submit">
    </form>
    ```
    result:
    ```
    {"color":["red","green","blue"]}
    ```
19. Multipart/Urlencoded binding
    ```go
    type ProfileForm struct {
    	Name   string                `form:"name" binding:"required"`
    	Avatar *multipart.FileHeader `form:"avatar" binding:"required"`
    
    	// or for multiple files
    	// Avatars []*multipart.FileHeader `form:"avatar" binding:"required"`
    }
    
    func main() {
    	router := gin.Default()
    	router.POST("/profile", func(c *gin.Context) {
    		// you can bind multipart form with explicit binding declaration:
    		// c.ShouldBindWith(&form, binding.Form)
    		// or you can simply use autobinding with ShouldBind method:
    		var form ProfileForm
    		// in this case proper binding will be automatically selected
    		if err := c.ShouldBind(&form); err != nil {
    			c.String(http.StatusBadRequest, "bad request")
    			return
    		}
    
    		err := c.SaveUploadedFile(form.Avatar, form.Avatar.Filename)
    		if err != nil {
    			c.String(http.StatusInternalServerError, "unknown error")
    			return
    		}
    
    		// db.Save(&form)
    
    		c.String(http.StatusOK, "ok")
    	})
    	router.Run(":8080")
    }
    ```
    Test it with:
    ```
    $ curl -X POST -v --form name=user --form "avatar=@./avatar.png" http://localhost:8080/profile
    ```
20. XML, JSON, YAML and ProtoBuf 渲染
    ```go
    func main() {
    	r := gin.Default()
    
    	// gin.H is a shortcut for map[string]interface{}
    	r.GET("/someJSON", func(c *gin.Context) {
    		c.JSON(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
    	})
    
    	r.GET("/moreJSON", func(c *gin.Context) {
    		// You also can use a struct
    		var msg struct {
    			Name    string `json:"user"`
    			Message string
    			Number  int
    		}
    		msg.Name = "Lena"
    		msg.Message = "hey"
    		msg.Number = 123
    		// Note that msg.Name becomes "user" in the JSON
    		// Will output  :   {"user": "Lena", "Message": "hey", "Number": 123}
    		c.JSON(http.StatusOK, msg)
    	})
    
    	r.GET("/someXML", func(c *gin.Context) {
    		c.XML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
    	})
    
    	r.GET("/someYAML", func(c *gin.Context) {
    		c.YAML(http.StatusOK, gin.H{"message": "hey", "status": http.StatusOK})
    	})
    
    	r.GET("/someProtoBuf", func(c *gin.Context) {
    		reps := []int64{int64(1), int64(2)}
    		label := "test"
    		// The specific definition of protobuf is written in the testdata/protoexample file.
    		data := &protoexample.Test{
    			Label: &label,
    			Reps:  reps,
    		}
    		// Note that data becomes binary data in the response
    		// Will output protoexample.Test protobuf serialized data
    		c.ProtoBuf(http.StatusOK, data)
    	})
    
    	// Listen and serve on 0.0.0.0:8080
    	r.Run(":8080")
    }
    ```
21. SecureJSON
该函数防止json劫持，默认会在json结构体前插入`while(1)`
    ```go
    func main() {
    	r := gin.Default()
    
    	// You can also use your own secure json prefix
    	// r.SecureJsonPrefix(")]}',\n")
    
    	r.GET("/someJSON", func(c *gin.Context) {
    		names := []string{"lena", "austin", "foo"}
    
    		// Will output  :   while(1);["lena","austin","foo"]
    		c.SecureJSON(http.StatusOK, names)
    	})
    
    	// Listen and serve on 0.0.0.0:8080
    	r.Run(":8080")
    }
    ```
22. JSONP
使用JSONP从不同域的服务请求数据，如果请求参数中有callback参数，那么该callback参数会被加入到响应中。
    ```go
    func main() {
    	r := gin.Default()
    
    	r.GET("/JSONP", func(c *gin.Context) {
    		data := gin.H{
    			"foo": "bar",
    		}
    		
    		//callback is x
    		// Will output  :   x({\"foo\":\"bar\"})
    		c.JSONP(http.StatusOK, data)
    	})
    
    	// Listen and serve on 0.0.0.0:8080
    	r.Run(":8080")
    
            // client
            // curl http://127.0.0.1:8080/JSONP?callback=x
    }
    ```
23. AsciiJSON
该函数会将非ascii码转换成ascii码。
24. PureJSON
通常JSON会用unicode码替换某些html字符，比如 `<`被换成`\u003c`。如果你想按照字面量来编码，就用该函数。
    ```go
    func main() {
    	r := gin.Default()
    	
    	// Serves unicode entities
    	r.GET("/json", func(c *gin.Context) {
    		c.JSON(200, gin.H{
    			"html": "<b>Hello, world!</b>",
    		})
    	})
    	
    	// Serves literal characters
    	r.GET("/purejson", func(c *gin.Context) {
    		c.PureJSON(200, gin.H{
    			"html": "<b>Hello, world!</b>",
    		})
    	})
    	
    	// listen and serve on 0.0.0.0:8080
    	r.Run(":8080")
    }
    ```
25. 提供静态文件服务
    ```go
    func main() {
    	router := gin.Default()
    	router.Static("/assets", "./assets")
    	router.StaticFS("/more_static", http.Dir("my_file_system"))
    	router.StaticFile("/favicon.ico", "./resources/favicon.ico")
    
    	// Listen and serve on 0.0.0.0:8080
    	router.Run(":8080")
    }
    ```    
26. Serving data from file
    ```go
    func main() {
    	router := gin.Default()
    
    	router.GET("/local/file", func(c *gin.Context) {
    		c.File("local/file.go")
    	})
    
    	var fs http.FileSystem = // ...
    	router.GET("/fs/file", func(c *gin.Context) {
    		c.FileFromFS("fs/file.go", fs)
    	})
    }
    ``` 
27. Serving data from reader
    ```go
    func main() {
    	router := gin.Default()
    	router.GET("/someDataFromReader", func(c *gin.Context) {
    		response, err := http.Get("https://raw.githubusercontent.com/gin-gonic/logo/master/color.png")
    		if err != nil || response.StatusCode != http.StatusOK {
    			c.Status(http.StatusServiceUnavailable)
    			return
    		}
    
    		reader := response.Body
     		defer reader.Close()
    		contentLength := response.ContentLength
    		contentType := response.Header.Get("Content-Type")
    
    		extraHeaders := map[string]string{
    			"Content-Disposition": `attachment; filename="gopher.png"`,
    		}
    
    		c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)
    	})
    	router.Run(":8080")
    }
    ``` 
28. Goroutines inside a middleware
When starting new Goroutines inside a middleware or handler, you SHOULD NOT use the original context inside it, you have to use a read-only copy.
    ```go
    func main() {
    	r := gin.Default()
    
    	r.GET("/long_async", func(c *gin.Context) {
    		// create copy to be used inside the goroutine
    		cCp := c.Copy()
    		go func() {
    			// simulate a long task with time.Sleep(). 5 seconds
    			time.Sleep(5 * time.Second)
    
    			// note that you are using the copied context "cCp", IMPORTANT
    			log.Println("Done! in path " + cCp.Request.URL.Path)
    		}()
    	})
    
    	r.GET("/long_sync", func(c *gin.Context) {
    		// simulate a long task with time.Sleep(). 5 seconds
    		time.Sleep(5 * time.Second)
    
    		// since we are NOT using a goroutine, we do not have to copy the context
    		log.Println("Done! in path " + c.Request.URL.Path)
    	})
    
    	// Listen and serve on 0.0.0.0:8080
    	r.Run(":8080")
    }
    ```
<br>
* ****









